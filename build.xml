<?xml version="1.0" encoding="UTF-8"?>
<project name="FRC Deployment" default="deploy" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property file="build.properties"/>
  <path id="project.class.path">
    <fileset dir="${lib.dir}" includes="**/*.jar"/>
  </path>

  <path id="project.tasks.path">
    <fileset dir="${tasks.dir}" includes="**/*.jar"/>
  </path>

  <target name="download-ivy" unless="offline" description="Downlad ivy if it does not already exist.">
      <mkdir dir="${ivy.jar.dir}"/>
      <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init-ivy" depends="download-ivy" description="Initialize ivy with ant">
      <path id="ivy.lib.path">
          <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
      </path>
      <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
      <ivy:settings file="ivysettings.xml"/>
  </target>

  <target name="dependencies" depends="init-ivy" description="Retrieve the build dependencies">
    <ivy:retrieve conf="dep"/>
  </target>

  <target name="deploy-dependencies" depends="init-ivy" description="Retrieve the dependencies for deployment">
    <ivy:retrieve conf="tasks" pattern="${tasks.dir}/[artifact]-[revision].[ext]"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="project.tasks.path"/>
  </target>
  
  <target name="compile" depends="dependencies" description="Compile the source">
    <mkdir dir="${build.dir}"/>
    <echo>Compiling ${src.dir} with classpath=${toString:project.class.path} to ${build.dir}</echo>
    <javac srcdir="${src.dir}"
      destdir="${build.dir}"
      includeAntRuntime="no"
      includeJavaRuntime="no"
      target="${ant.java.version}"
      source="${ant.java.version}"
      compiler="javac${ant.java.version}"
      debug="true">
      <classpath refid="project.class.path"/>
    </javac>
  </target>

  <target name="jar" depends="compile,dependencies" description="Generate the distribution">
    <echo>Making jar ${dist.jar}</echo>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.jars}"/>

    <echo>Copying jars from classpath=${toString:project.class.path} to ${build.jars}</echo>
    <copy todir="${build.jars}" flatten="true">
      <path refid="project.class.path"/>
    </copy>
    <jar destfile="${dist.jar}" update="false">
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
        <attribute name="Robot-Class" value="${robot.class}"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
      <fileset dir="${build.dir}" includes="**/*.class"/>
      <zipgroupfileset dir="${build.jars}">
        <include name="**/*.jar"/>
      </zipgroupfileset>
    </jar>
  </target>

  <target name="deploy" depends="clean-build,jar,get-target-ip,verify-rio" description="Deploy the jar and restart the roboRio">
    <echo>Starting deployment</echo>
    <scp file="${dist.jar}" todir="${username}@${target}:${deploy.dir}" password="${password}" trust="true"/>
    <sshexec host="${target}"
      username="admin"
      password="${password}"
      trust="true"
      failonerror="false"
      command="killall -q netconsole-host || :"/>

    <scp file="${robot.command}" todir="${username}@${target}:${robot.command.dir}" password="${password}" trust="true"/>

    <echo>Starting program</echo>
    <sshexec host="${target}"
      username="${username}"
      password="${password}"
      trust="true"
      failonerror="false"
      command="${deploy.kill.command};"/>

    <sshexec host="${target}"
      username="${username}"
      password="${password}"
      trust="true"
      command="sync" />
  </target>

  <target name="clean" depends="clean-build,clean-dep" description="Cleans everything that can be compiled or gathered" />

  <target name="clean-build" description="Clean up the build and distribution">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="sysProps.xml"/>
  </target>

  <target name="clean-dep" description="Clean the dependencies of the project">
    <delete dir="${lib.dir}"/>
    <delete dir="${tasks.dir}"/>
  </target>

  <target name="get-target-ip" depends="deploy-dependencies">
    <fail unless="team-number" message="Team number needs to be set in the build.properties"/>
    <property name="target" value="roboRIO-${team-number}-FRC.local" />
    <echo>Trying Target: ${target}</echo>
    <if>
      <isreachable host="${target}" timeout="5"/>
      <then>
        <echo>roboRIO found via mDNS</echo>
      </then>
      <else>
        <var name="target" unset="true"/>
        <echo> roboRIO not found via mDNS, falling back to static USB</echo>
        <property name="target" value="172.22.11.2"/>
        <if>
          <isreachable host="${target}" timeout="5"/>
          <then>
            <echo>roboRIO found via static USB</echo>
          </then>
          <else>
            <var name="target" unset="true"/>
            <math result="ip.upper" operand1="${team-number}" operation="/" operand2="100" datatype="int"/>
            <math result="ip.lower" operand1="${team-number}" operation="%" operand2="100" datatype="int"/>
            <property name="target" value="10.${ip.upper}.${ip.lower}.2"/>
            <echo>roboRIO not found via USB, falling back to static address of ${target}</echo>
            <if>
              <not>
                <isreachable host="${target}" timeout="5"/>
              </not>
              <then>
                <fail message="roboRIO not found, please check that the roboRIO is connected, imaged and that the team number is set properly"/>
              </then>
            </if>
            <echo>roboRIO found via Ethernet static</echo>
          </else>
        </if>
      </else>
    </if>
  </target>

  <target name="verify-rio" depends="get-target-ip,deploy-dependencies">
    <post to="http://${target}/nisysapi/server" logfile="sysProps.xml" verbose="false" encoding="UTF-16LE" append="false">
      <prop name="Function" value="GetPropertiesOfItem"/>
      <prop name="Plugins" value="nisyscfg"/>
      <prop name="Items" value="system"/>
    </post>
    <loadfile srcFile="sysProps.xml" encoding="UTF-16LE" property="roboRIOSysValues"/>
    <propertyregex property="roboRIOImage" input="${roboRIOSysValues}" regexp="FRC_roboRIO_2016_v([0-9]+)" select="\1" defaultValue="ImageRegExFail"/>
    <propertyregex property="roboRIOImageYear" input="${roboRIOSysValues}" regexp="FRC_roboRIO_([0-9]+)_v" select="\1" defaultValue="ImageRegExFail"/>
    <if>
      <not>
        <and>
          <contains string="${roboRIOAllowedImages}" substring="${roboRIOImage}"/>
          <contains string="${roboRIOAllowedYear}" substring="${roboRIOImageYear}"/>
        </and>
      </not>
      <then>
        <fail unless="roboRIO.allowed" message="Image of roboRIO does not match plugin. ${line.separator}Allowed image year: ${roboRIOAllowedYear} version: ${roboRIOAllowedImages}. ${line.separator}Actual image year: ${roboRIOImageYear} version ${roboRIOImage}. ${line.separator}RoboRIO needs to be re-imaged or plugins updated."/>
      </then>
    </if>
    <echo>roboRIO image version validated</echo>
    <echo>Checking for JRE. If this fails install the JRE using these instructions: https://wpilib.screenstepslive.com/s/4485/m/13503/l/288822-installing-java-8-on-the-roborio-using-the-frc-roborio-java-installer-java-only</echo>
    <sshexec host="${target}"
      username="${username}"
      password="${password}"
      trust="true"
      failonerror="true"
      command="test -d ${roboRIOJRE.dir}"/>
  </target>
</project> 
